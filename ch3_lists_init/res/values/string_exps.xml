<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string name="exp1_intro">
        \t本示例包含两个要点：\n
        \t\t资源文件数组的使用方式；\n
        \t\t使用系统定义的简单列表样式。\n
    </string>
    <string name="exp2_intro">
        \t本例使用了SimpleAdapter。创建其对象并传入5个参数。\n
        \t各参数意义见代码注释。\n
    </string>
    <string name="exp3_intro">
        \t本例介绍自定义适配器，继承BaseAdapter.\n
        \t适配器类需要获取两个重要参数，当前安卓组件的引用（指针）和数据结构的引用（指针）。\n
        \t分step1，2，3步分别介绍完善了自定义列表控件的代码。\n
        \tstep1为完成自定义列表控件的基本代码；step2，3旨在改进代码，提高列表控件界面运行效率。\n
    </string>
    <string name="exp3_step1_txt">
        \tStep1中完成了自定义列表控件的正常显示。\n
        \t在自定义适配器类中重写了getCount、getItem、getItemID、getView四个函数。\n
        \n\tgetCount设置列表控件对应不同数据需要重复绘制的次数，即item的个数。\n
        \tgetItem和getItemID针对每个item的操作。\n
        \tgetView负责每个item对应的数据以及绘制。\n
    </string>
    <string name="exp3_step2_txt">
        \t虽然界面没有变化，但Step1的ListView运行效率是很低的。\n
        \t因为在Adapter的getView()方法中每次都将布局重新加载了一遍，当ListView快速滚动的时候这就会成为性能的瓶颈。\n
        <b>\n\tgetView()中还有一个convertView参数，这个参数用于将之前加载好的布局进行缓存，以便之后可以进行重用。\n</b>
        \t请参考对比Mybaseadp1和Mybaseadp2的代码和注释。\n
    </string>
    <string name="exp3_step3_txt">
        \tStep3首先新增一个静态内部类ViewHolder，用于对ListView布局中控件的实例进行缓存。\n
        \t当convertView为空的时候，将控件的实例引用都存放在ViewHolder对象里。\n
        \t调用View类型中的setTag函数，该函数将ViewHolder对象与convertView关联起来。\n
        \t当convertView已经存在后，每次调用getTag获取ViewHolder对象，并从中获取控件引用。\n
        \t这样无需每次都调用findViewbyId函数，提高运行效率。\n
    </string>
</resources>
